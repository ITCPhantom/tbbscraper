#! /usr/bin/python3

import json
import os
import pprint
import psycopg2
import sys
import zlib

def dump_one_log(locale, url, result, detail, logbits):
    if logbits is None:
        decoded_log = "<no log available>"
    else:
        decoded_log = json.loads(zlib.decompress(logbits).decode("utf-8"))

    if 'stderr' in decoded_log or 'stdout' in decoded_log:
        print(locale+": "+url)
        print("  "+result+": "+detail)
        pprint.pprint({ 'stdout': decoded_log.get('stdout'),
                        'stderr': decoded_log.get('stderr') })

    #print(locale+": "+url)
    #print("  "+result+": "+detail)
    #pprint.pprint(decoded_log, indent=2, depth=3,
    #              width=os.environ.get("COLUMNS", 80)-1)

def dump_many_logs(dbname, where=""):
    query = """
    SELECT c.locale, s.url, c.result, d.detail, c.capture_log
      FROM captured_pages c,
           url_strings s,
           capture_detail d
     WHERE c.url = s.id
       AND c.detail = d.id
    """
    if where:
        query += " AND " + where

    db = psycopg2.connect(database=dbname)
    with db, db.cursor() as cur:
        cur.execute("SET search_path TO tbbscraper")
        cur.execute(query)
        for row in cur:
            dump_one_log(*row)

if __name__ == '__main__':
    if len(sys.argv) > 2:
        dump_many_logs(sys.argv[1], " ".join(sys.argv[2:]))
    elif len(sys.argv) == 2:
        dump_many_logs(sys.argv[1])
    else:
        raise SystemExit("usage: {} database [query condition]"
                         .format(sys.argv(0)))
