--- a/MANIFEST.in	2013-02-01 10:59:32.000000000 -0500
+++ b/MANIFEST.in	2013-07-24 10:26:36.411043741 -0400
@@ -7,7 +7,6 @@
 recursive-include py/selenium/webdriver/opera *.py
 recursive-include py/selenium/webdriver/phantomjs *.py
 recursive-include py/selenium/webdriver/firefox *.py *.xpi
-recursive-include py/selenium/webdriver/firefox/x86 *.so
 recursive-include py/selenium/webdriver/firefox/amd64 *.so
 recursive-include py/selenium/webdriver/ie *.py 
 recursive-include py/selenium/webdriver/remote *.py
--- a/selenium.egg-info/SOURCES.txt	2013-05-22 15:48:43.000000000 -0400
+++ b/selenium.egg-info/SOURCES.txt	2013-07-24 10:28:30.008308691 -0400
@@ -29,7 +29,6 @@
 py/selenium/webdriver/firefox/webdriver.py
 py/selenium/webdriver/firefox/webdriver.xpi
 py/selenium/webdriver/firefox/amd64/x_ignore_nofocus.so
-py/selenium/webdriver/firefox/x86/x_ignore_nofocus.so
 py/selenium/webdriver/ie/__init__.py
 py/selenium/webdriver/ie/service.py
 py/selenium/webdriver/ie/webdriver.py
--- a/setup.py	2013-05-22 15:48:42.000000000 -0400
+++ b/setup.py	2013-07-24 10:27:50.387867478 -0400
@@ -66,8 +66,7 @@
     'package_data':{
         'selenium.webdriver.firefox': ['*.xpi'],
     },
-    'data_files':[('selenium/webdriver/firefox/x86', ['py/selenium/webdriver/firefox/x86/x_ignore_nofocus.so']),
-            ('selenium/webdriver/firefox/amd64', ['py/selenium/webdriver/firefox/amd64/x_ignore_nofocus.so'])],
+    'data_files':[('selenium/webdriver/firefox/amd64', ['py/selenium/webdriver/firefox/amd64/x_ignore_nofocus.so'])],
     'include_package_data':True,
     'zip_safe':False
 }
--- a/py/selenium/webdriver/firefox/firefox_binary.py	2013-04-10 09:08:05.000000000 -0400
+++ b/py/selenium/webdriver/firefox/firefox_binary.py	2013-07-26 18:37:08.630074528 -0400
@@ -151,30 +150,12 @@
         return ""
 
     def _modify_link_library_path(self):
-        existing_ld_lib_path = os.environ.get('LD_LIBRARY_PATH', '')
-
-        new_ld_lib_path = self._extract_and_check(
-            self.profile, self.NO_FOCUS_LIBRARY_NAME, "x86", "amd64")
-
-        new_ld_lib_path += existing_ld_lib_path
-
-        self._firefox_env["LD_LIBRARY_PATH"] = new_ld_lib_path
-        self._firefox_env['LD_PRELOAD'] = self.NO_FOCUS_LIBRARY_NAME
-
-    def _extract_and_check(self, profile, no_focus_so_name, x86, amd64):
-
-        paths = [x86, amd64]
-        built_path = ""
-        for path in paths:
-            library_path = os.path.join(profile.path, path)
-            os.makedirs(library_path)
-            import shutil
-            shutil.copy(os.path.join(os.path.dirname(__file__), path,
-              self.NO_FOCUS_LIBRARY_NAME),
-              library_path)
-            built_path += library_path + ":"
+        amd64_module_path = os.path.join(os.path.dirname(__file__), "amd64")
+        preload = os.path.join(amd64_module_path, self.NO_FOCUS_LIBRARY_NAME)
+        if not os.path.exists(preload):
+            raise RuntimeError("%s is missing, cannot continue\n" % preload)
 
-        return built_path
+        self._firefox_env['LD_PRELOAD'] = preload
 
     def which(self, fname):
         """Returns the fully qualified path by searching Path of the given 
