#! /usr/bin/python3

# Convert a .pat file to a C .inc file.
# Reads from stdin, writes to stdout.

import sys
from string import hexdigits

def to_c_string(bstr):
    cch = []
    for c in bstr:
        if c == 0x5C: # \
            cch.append("\\\\")
        elif c == 0x22: # "
            cch.append("\\\"")
        elif c >= 0x20 and c <= 0x7e:
            cch.append(chr(c))
        else:
            cch.append("\\x{:02x}".format(c))

    for i in range(len(cch)):
        if (i+1 < len(cch) and
            cch[i][0] == "\\" and cch[i][1] == "x" and
            cch[i+1][0] in hexdigits):
            cch[i] += "\"\""

    return "\"" + "".join(cch) + "\""

def main():
    sys.stdout.write("""\
// Generated by mimesniff.convert.py from mimesniff.pat. -*- C -*-
// DO NOT EDIT.
#ifndef _MIMESNIFF_INC
#define _MIMESNIFF_INC
#define PAT(a,b,c,d,e,f) \
    { a, b, c, (const unsigned char *)d, (const unsigned char *)e, f }

""")

    output = []

    for line in sys.stdin:
        line = line.strip()
        if not line: continue
        if line[0] == "#":
            output.append((True, "// " + line[1:].lstrip() + "\n"))
            continue

        try:
            pattern, mask, skip, mime = line.split()
            assert len(pattern) == len(mask)
            assert len(pattern) % 2 == 0
            assert skip in ("None", "Whitespace")
            if pattern[-2:] == "TT":
                tagend = True
                pattern = pattern[:-2]
                mask = mask[:-2]
            else:
                tagend = False

            blen = len(pattern)//2
            pattern = to_c_string(bytes.fromhex(pattern))
            mask    = to_c_string(bytes.fromhex(mask))
            output.append((False,
                           (str(blen) + ",",
                            "true," if skip == "Whitespace" else "false,",
                            "true," if tagend else "false,",
                            pattern+",",
                            mask+",",
                            to_c_string(mime.encode("ascii")))))

        except Exception as e:
            output.append((True, "//*" + str(e) + "* " + line + "\n"))
            continue

    cwidths = [0,0,0,0,0,0]
    for is_comment, fields in output:
        if is_comment: continue
        for i, field in enumerate(fields):
            cwidths[i] = max(cwidths[i], len(field))

    ofmt = ("  PAT( {{:>{}}} {{:<{}}} {{:<{}}} {{:<{}}} {{:<{}}} {{:<{}}} ),\n"
               .format(*cwidths))

    for is_comment, fields in output:
        if is_comment:
            sys.stdout.write(fields)
        else:
            sys.stdout.write(ofmt.format(*fields))

    sys.stdout.write("\n#undef PAT\n#endif\n")

main()
